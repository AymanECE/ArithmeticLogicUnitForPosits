library IEEE;
use IEEE.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.PLU_package.all;

entity PLU is 

port (  nbofbitfractionn1 : in std_logic_vector( nbofbitsforinteger downto 0 );
        nbofbitfractionn2 : in std_logic_vector( nbofbitsforinteger downto 0 );
        cases: in std_logic_vector ( 2 downto 0 ); 
		fraction1resizedshifted: in std_logic_vector ( nbofbits-1 downto 0);
		fraction2resizedshifted : in std_logic_vector (nbofbits-1 downto 0 );
		PLU_Result: out std_logic_vector (nbofbits-1 downto 0);
		flag1forexponent : out std_logic;
		flag2forexponent : out std_logic
		);
		end PLU;
architecture PLUarchi of PLU is
begin

process(cases,fraction1resizedshifted,fraction2resizedshifted) 
variable fraction1addedto1: std_logic_vector(nbofbits-1 downto 0);
variable fraction2addedto1: std_logic_vector(nbofbits-1 downto 0);
variable nbofbitfraction1 : integer;
variable nbofbitfraction2 : integer;
begin
nbofbitfraction1 := to_integer(unsigned(nbofbitfractionn1));
nbofbitfraction2 := to_integer(unsigned(nbofbitfractionn2));

flag1forexponent <= '0';
flag2forexponent <='0';
--if( to_integer(unsigned(fraction1resizedshifted))  > to_integer(unsigned(fraction2resizedshifted)) )then 
	case(cases) is --Make sure that A is always > B, that way we can reduce the statements and take the sign of A
	
	when ( "000" ) => --  A+B or -A - B                                                                               
   PLU_Result <= std_logic_vector(unsigned(fraction1resizedshifted)+unsigned(fraction2resizedshifted)) ;
  
  
    when ("001") => --Subtract A-B 
    if( to_integer(unsigned(fraction1resizedshifted))  > to_integer(unsigned(fraction2resizedshifted)) )then 
	   PLU_Result <= std_logic_vector(unsigned(fraction1resizedshifted)-unsigned(fraction2resizedshifted)) ;
	else 
	    -- I need to shift FA by one, decrement the total exponent in A and shift FB to the left by one also since total exponent changed. I willdo the total exponent change in post processing by using the flag
	   fraction1addedto1 := std_logic_vector(unsigned(fraction1resizedshifted) + shift_left(to_unsigned(1, nbofbits),nbofbitfraction1));

	   fraction1addedto1 := std_logic_vector(unsigned(fraction1addedto1)-unsigned(fraction2resizedshifted)) ; --Now do the subtraction
	   fraction1addedto1 := std_logic_vector( shift_left(unsigned(fraction1addedto1),1)); -- So I shift to the left and decrement my exponent by 1 which will be done in postprocessing
	   PLU_Result <= std_logic_vector( unsigned(fraction1addedto1) - shift_left(to_unsigned(1,nbofbits),nbofbitfraction1));
	   flag1forexponent <= '1'; --flsg to decrement later on in postprocessing
	    
	  end if;
	  
	  
	 when ( "011") => -- B- A
	 PLU_Result <= std_logic_vector( unsigned(fraction2resizedshifted) - unsigned(fraction1resizedshifted));
	  if( to_integer(unsigned(fraction2resizedshifted))  > to_integer(unsigned(fraction1resizedshifted)) )then 
           PLU_Result <= std_logic_vector(unsigned(fraction2resizedshifted)-unsigned(fraction1resizedshifted)) ;
        else 
            fraction2addedto1 := std_logic_vector(unsigned(fraction2resizedshifted) + shift_left(to_unsigned( 1, nbofbits),nbofbitfraction2));

             fraction2addedto1 := std_logic_vector(unsigned(fraction2addedto1)-unsigned(fraction1resizedshifted)) ; --Now do the subtraction
             fraction2addedto1 := std_logic_vector( shift_left(unsigned(fraction2addedto1),1)); -- So I shift to the left and decrement my exponent by 1 which will be done in postprocessing
              PLU_Result <= std_logic_vector( unsigned(fraction2addedto1) - shift_left(to_unsigned(1,nbofbits),nbofbitfraction2));
             flag2forexponent <= '1'; --flsg to decrement later on in postprocessing
          end if ;
	
	
	  when others => PLU_Result <= "1111111111111111";
	   
	  
	 end case;
--else 

	--case(cases) is -- Here B is > A, so i can do B-A
--	when ("000" or "010") => -- Addition
  -- PLU_Result <= std_logic_vector(unsigned(fraction2resizedshifted)+unsigned(fraction1resizedshifted)) ;
   
  --  when ("011") => --B -A , what  if i wan to do A - B and B is bigger than A then i Do B- A and 
  --   PLU_Result <= std_logic_vector(unsigned(fraction2resizedshifted)-unsigned(fraction1resizedshifted)) ;
 
	--when others => PLU_Result <= "1111111111111111";
	
	-- end case;

--end if; 

end process;
end PLUarchi;

library IEEE;
use IEEE.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.PLU_package.all;

entity FullPLU is
port (              Posit1 : in std_logic_vector(nbofbits-1 downto 0 ); -- first posit
                   Posit2 : in std_logic_vector(nbofbits-1 downto 0);
                   nbofbitfractionn1: in std_logic_vector(nbofbitsforinteger downto 0);
                   nbofbitfractionn2: in std_logic_vector(nbofbitsforinteger downto 0);
                   nbofbitexponentt1: in std_logic_vector(nbofbitsforinteger downto 0);
                   nbofbitexponentt2: in std_logic_vector(nbofbitsforinteger downto 0);
                   operation: in std_logic_vector(2 downto 0 );
                   Posit4 : out std_logic_vector(nbofbits-1 downto 0 );
                   es : in std_logic_vector(nbofbitsforinteger downto 0 )
                    );
end FullPLU;

architecture Behavioral of FullPLU is

component PreProcessing 

port ( 
		    Posit1 : in std_logic_vector(nbofbits-1 downto 0 ); -- first posit
                   Posit2 : in std_logic_vector(nbofbits-1 downto 0);
                   nbofbitfractionn1: in std_logic_vector(nbofbitsforinteger downto 0);
                   nbofbitfractionn2: in std_logic_vector(nbofbitsforinteger downto 0);
                   nbofbitexponentt1: in std_logic_vector(nbofbitsforinteger downto 0);
                   nbofbitexponentt2: in std_logic_vector(nbofbitsforinteger downto 0);
                   operation: in std_logic_vector( 2 downto 0 );
                   cases: out std_logic_vector( 3 downto 0 ); 
                   fraction1resizedshifteds : out std_logic_vector( nbofbits-1 downto 0);
                   fraction2resizedshifteds : out std_logic_vector(nbofbits-1 downto 0 );
                   totalexponentt1: out std_logic_vector(nbofbitsforinteger downto 0);
                   totalexponentt2:out std_logic_vector(nbofbitsforinteger downto 0);
                   expo1valuee: out std_logic_vector(nbofbitsforinteger downto 0);
                   expo2valuee: out std_logic_vector(nbofbitsforinteger downto 0);
                    nbofregimebitt1 : out  std_logic_vector(nbofbitsforinteger downto 0 ) ;
                   nbofregimebitt2 : out std_logic_vector(nbofbitsforinteger downto 0 );
                   es :in std_logic_vector(nbofbitsforinteger downto 0 ) 
		);
	end component;
		
component PLU
        port (   nbofbitfractionn1 : in std_logic_vector( nbofbitsforinteger downto 0 );
       nbofbitfractionn2 : in std_logic_vector( nbofbitsforinteger downto 0 );
            cases : in std_logic_vector ( 3 downto 0 );                                                                
            fraction1resizedshifted: in std_logic_vector ( nbofbits-1 downto 0);                                                     
            fraction2resizedshifted : in std_logic_vector (nbofbits-1 downto 0 );                                                                                                               
            PLU_Result : out std_logic_vector (nbofbits-1 downto 0);
            flag1forexponent : out std_logic;
            flag2forexponent : out std_logic         ;
              howmuchtoshiftsubtract : out std_logic_vector ( nbofbits-1 downto 0 )  ;
              Flag1ForSubtraction : out std_logic    ;
                 totalexponent1 : in std_logic_vector(nbofbitsforinteger downto 0 );
                   totalexponent2 : in std_logic_vector(nbofbitsforinteger downto 0 );
         fractionformultiplicationn : out std_logic_vector(nbofbitsformultiplication -1 downto 0 )
            );                                                                                                              
            end component;  
            
            

component PostProcessing
           
            port (  
                    Posit1 : in std_logic_vector(nbofbits-1 downto 0);
                    Posit2 : in std_logic_vector(nbofbits-1 downto 0);
                    Positt3 : in std_logic_vector(nbofbits-1 downto 0); -- this just contains the fraction bit
                    totalexponent1 : in std_logic_vector(nbofbitsforinteger downto 0 );
                    totalexponent2 : in std_logic_vector(nbofbitsforinteger downto 0 );
                    nbofbitfractionn1 : in std_logic_vector(nbofbitsforinteger downto 0);
                    nbofbitfractionn2 : in std_logic_vector(nbofbitsforinteger downto 0);
                    nbofbitexponentt1 : in std_logic_vector(nbofbitsforinteger downto 0);
                    nbofbitexponentt2 : in std_logic_vector(nbofbitsforinteger downto 0);
                    nbofregimebitt1 :in std_logic_vector(nbofbitsforinteger downto 0);
                    nbofregimebitt2 : in std_logic_vector(nbofbitsforinteger downto 0);
                    expo1valuee : in std_logic_vector(nbofbitsforinteger downto 0);
                    expo2valuee : in std_logic_vector(nbofbitsforinteger downto 0);
                    cases : in std_logic_vector ( 3 downto 0 );
                    Posit4 : out std_logic_vector(nbofbits-1 downto 0 ) ;-- this is the final output
                    flag1forexponent : in std_logic;
                    flag2forexponent : in std_logic;
                    howmuchtoshiftsubtract : in std_logic_vector ( nbofbits-1 downto 0 );
                    Flag1ForSubtraction : in std_logic ;
                 es : in std_logic_vector ( nbofbitsforinteger downto 0 );
                  fractionformultiplicationn : in std_logic_vector(nbofbitsformultiplication -1 downto 0 )
                    );
            end component; 
            
signal cases: std_logic_vector( 3 downto 0);                    
signal expo1valuee : std_logic_vector ( nbofbitsforinteger downto 0 );
signal expo2valuee: std_logic_vector ( nbofbitsforinteger downto 0 );   
signal fraction1resizedshifteds : std_logic_vector(nbofbits-1 downto 0 );
signal fraction2resizedshifteds : std_logic_vector(nbofbits-1 downto 0 );
signal totalexponentt1: std_logic_vector(nbofbitsforinteger downto 0);
signal totalexponentt2 : std_logic_vector(nbofbitsforinteger downto 0);
signal PLU_Result: std_logic_vector(nbofbits-1 downto 0 );
signal nbofregimebitt1 : std_logic_vector(nbofbitsforinteger downto 0 ) ;
signal nbofregimebitt2:std_logic_vector(nbofbitsforinteger downto 0 );
signal	flag1forexponent :  std_logic;
signal flag2forexponent :  std_logic;
signal howmuchtoshiftsubtract : std_logic_vector ( nbofbits-1 downto 0 );
signal Flag1ForSubtraction : std_logic;
signal fractionformultiplicationn : std_logic_vector(nbofbitsformultiplication -1 downto 0 );

begin

U1: PreProcessing port map (Posit1, -- first posit
                   Posit2,  
                   nbofbitfractionn1 ,
                   nbofbitfractionn2,
                   nbofbitexponentt1,
                   nbofbitexponentt2,
                   operation,
                   cases,
                   fraction1resizedshifteds,
                   fraction2resizedshifteds,
                   totalexponentt1,
                   totalexponentt2,
                   expo1valuee,
                   expo2valuee,
                   nbofregimebitt1,
                   nbofregimebitt2,
                   es );
                   
 U2 : PLU port map (        nbofbitfractionn1,
                            nbofbitfractionn2,
                                cases,                                                             
                              fraction1resizedshifteds,                                           
                              fraction2resizedshifteds,                                                                                                            
                              PLU_Result ,
                              flag1forexponent,
                              flag2forexponent,
                              howmuchtoshiftsubtract,
                              Flag1ForSubtraction ,
                                 totalexponentt1 ,
                                   totalexponentt2 ,
                               fractionformultiplicationn
                              ); 
 
 
 
U3 : PostProcessing port map (         Posit1,  
                                       Posit2,  
                                       PLU_Result,   -- this just contains the fraction bit
                                       totalexponentt1, 
                                       totalexponentt2, 
                                       nbofbitfractionn1, 
                                       nbofbitfractionn2, 
                                       nbofbitexponentt1, 
                                       nbofbitexponentt2,
                                       nbofregimebitt1, 
                                       nbofregimebitt2, 
                                       expo1valuee, 
                                       expo2valuee, 
                                       cases, 
                                       Posit4 ,
                                       flag1forexponent,
                                       flag2forexponent,
                                       howmuchtoshiftsubtract,
                                       Flag1ForSubtraction  ,
                                       es ,
                                        fractionformultiplicationn 
                                       );

                                       


end Behavioral;
